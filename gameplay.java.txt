package BRICKBRACKER;
import java.awt.*; // new rect
import javax.swing.Timer;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.ActionListener;
import java.awt.Graphics2D;


public class GamePlay extends JPanel implements KeyListener ,ActionListener {
    private boolean play = false;
    private int score = 0;
    private int totalbricks = 21;// 7/3

    private Timer time;        // srtting time/speed of  ball movement
    private int delay = 8;
    private int PlayerX = 210;

    private int ballposX = 120; // x and y axis of slider and ball both
    private int ballposY = 350;
    private int ballXdir = -1;
    private int ballYdir = -2;
    private MapGenerator map ;

    public GamePlay() { // constructor
        map= new MapGenerator(3,7);
        addKeyListener(this); // to work with keyListener add this
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        time = new Timer(delay,this);
        time.start();

    }

    public void paint(Graphics g) { // slider and ball
        //background
        g.setColor(Color.black);
        g.fillRect(1, 1, 692, 592); // rectangle

        // drawing map
        map.draw((Graphics2D)g);

        //SCores
        g.setColor(Color.white);
        g.setFont(new Font("serif", Font.BOLD,25));
        g.drawString(""+score,590,30);

        // borders
        g.setColor(Color.yellow);
        g.fillRect(0, 0, 3, 592);
        g.fillRect(0, 0, 692, 3);
        g.fillRect(691, 0, 3, 592);

        // the paddle
        g.setColor(Color.green);
        g.fillRect(PlayerX,550,100, 8);

        // THE BALL
        g.setColor(Color.yellow);
        g.fillOval(ballposX, ballposY, 20, 20);

        if(ballposY > 570){
            play=false;
            ballYdir=0;
            ballXdir=0;
            g.setColor(Color.RED);
            g.setFont(new Font("serif", Font.BOLD,30));
            g.drawString("Game over, Scores:",190,300);


            g.setFont(new Font("serif", Font.BOLD,20));
            g.drawString("Press Enter to Restart",230,350);
        }
        g.dispose();
    }


    @Override
    public void actionPerformed(ActionEvent e) { // for ball
        time.start();
        if (play) { // detect ball with paddle
            if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(PlayerX, 550, 100, 8)))
                ballYdir = -ballYdir;
            ballposX += ballXdir;
            ballposY += ballYdir;

           A: for(int i=0;i<map.map.length;i++){
                for(int j=0;j<map.map[0].length;j++){
                    if(map.map[i][j] >0){
                        int BrickX=j*map.BrickWidth +80;
                        int BrickY=i*map.BrickHeight+50;
                        int BrickWidth=map.BrickWidth;
                        int BrickHeight=map.BrickHeight;
                        Rectangle rect=new Rectangle(BrickX, BrickY,BrickWidth,BrickHeight);
                        Rectangle ballRect= new Rectangle(ballposX, ballposY,20,20);
                        Rectangle brickRect=rect;
                        if(ballRect.intersects(brickRect)){
                            map.setBrickValue(0,i,j);
                            totalbricks--;
                            score+=5;
                            if(ballposX+19 <= brickRect.x || ballposX+1 >= brickRect.x + brickRect.width){
                                ballXdir=-ballXdir;
                            }else{
                                ballYdir=-ballYdir;
                            }
    break A;
                        }

                    }
                }
            }
            ballposX += ballXdir;
            ballposY += ballYdir;
            if (ballposX < 0) {
                ballXdir = -ballXdir; // left
            }
            if (ballposY < 0) {
                ballYdir = -ballYdir; // top
            }
            if (ballposX > 670) {
                ballXdir = -ballXdir; //right

            }
        }
        repaint();

    }
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (PlayerX >= 600) {
                PlayerX = 600;
            } else {
                moveRight();
            }
        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (PlayerX < 300) ;
                PlayerX = 300;
        } else {
            moveLeft();
        }

    }

    public void moveRight() {
        play = true;
        PlayerX += 20;
}
    public void moveLeft(){
    play=true;
    PlayerX-=20;
}

}
